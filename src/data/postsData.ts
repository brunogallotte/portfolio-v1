import { PostProps } from "../components/Post/Post";
import reactImg from '../assets/posts/react.jpeg'
import cleanImg from '../assets/posts/clean.jpeg'

export const posts: PostProps[] = [
    {
        id: 1,
        publishedAt: '22 de dezembro',
        title: 'React e performance: o uso da key no map!',
        content: "Esse √© um ponto que pode impactar diretamente na performance do seu projeto, dependendo do tamanho que ele tenha. E eu acho imporatante entender o motivo de se passar uma key, e as consequ√™ncias de n√£o passar. No in√≠cio eu passava a key mas n√£o sabia exatamente o porqu√™ disso, s√≥ sabia que eu precisava passar alguma informa√ß√£o como key que fosse √∫nica, mas ainda n√£o havia parado pra refletir sobre, e entender o motivo mais a fundo. A quest√£o √© que o React usa essa propriedade para realizar uma compara√ß√£o entre os componentes que j√° estavam em tela e os poss√≠veis novos componentes da itera√ß√£o. J√° deu pra ter uma boa no√ß√£o n√©? Pois √©, e esse tamb√©m √© o motivo pelo qual a key precisa ser √∫nica. Mas disso podem surgir algumas indaga√ß√µes, tais como: E por que n√£o podemos usar o √≠ndice do array, ja que este √© √∫nico?. Porque, por exemplo, voc√™ pode modificar os seus dados de posi√ß√£o dentro de um array, mas o √≠ndice do array continuar√° sendo o mesmo. E como consequ√™ncia o React ir√° renderizar tudo do zero novamente, pois ir√° inferir erroneamente que os elementos foram movidos quando, na verdade, apenas a ordem no array foi alterada. Para que essa funcionalidade tenha uma boa performance, √© de fato necess√°rio que a key seja √∫nica, e n√£o aleat√≥ria, de forma que permita a identifica√ß√£o do componente. Se as chaves fossem aleat√≥rias, o React teria que comparar todas as chaves em vez de simplesmente verificar se uma chave espec√≠fica est√° presente.",
        tag: 'React.js',
        timeToRead: '4 min',
        postImg: reactImg,
        link: 'https://www.linkedin.com/posts/brunogallotte_react-dev-frontend-activity-7143970657846939648-wPyd?utm_source=share&utm_medium=member_desktop'
    },
    {
        id: 2,
        publishedAt: '17 de dezembro',
        title: 'Arquitetura limpa: desenvolvimento de software n√£o √© um empreendimento matem√°tico',
        content: "Sempre tive o h√°bito de leitura, na maioria das vezes um pouco mais t√©cnica, e com temas relacionados √° ci√™ncia. Mais pro in√≠cio do ano li o 'Estruturas de Dados e Algoritmos com JavaScript', enquanto dava os primeiros passos no desenvolvimento web. Gostava de comparar o conte√∫do do livro com o do curso, e de observar como √© poss√≠vel ter o mesmo resultado de diferentes formas. Atualmente estou querendo mergulhar mais em leituras de livros que s√£o refer√™ncia em tecnologia. E levando em conta que ultimamente ando pesquisando sobre boas pr√°ticas em geral, optei pelo Arquitetura Limpa do autor Robert Martin. Cheguei em um ter√ßo do livro e j√° deu pra perceber a import√¢ncia de se ter uma boa arquitetura no projeto. Os preju√≠zos advindos de um mal planejamento podem ser catastr√≥ficos, o autor enfatiza isso logo nas primeiras p√°ginas. Tive o primeiro contato com os princ√≠pios SOLID, testabilidade, independ√™ncia do banco de dados, dentre outros pontos abordados pelo autor. Mas logo no in√≠cio, mais especificamente na p√°gina 31, o autor traz uma perspectiva do desenvolvimento de software que, particularmente, eu achei muito interessante, por me lembrar um pouco dos testes laboratoriais. Ele afirma que, o desenvolvimento de software n√£o √© um empreendimento matem√°tico. E pode ser que voc√™ se pergunte, como assim ü§î ? A resposta que embasa essa afirma√ß√£o √© pautada no fato de que demonstramos a exatid√£o quando falhamos em comprovar a inexatid√£o. O software √© como uma ci√™ncia orientada para a refutabilidade. 'Os testes mostram a presen√ßa, n√£o a aus√™ncia, de bugs.' Ou seja, segundo o autor, estes evidenciam a exist√™ncia de falhas, n√£o sua aus√™ncia. Em outras palavras, enquanto um teste pode apontar a incorre√ß√£o de um programa, n√£o √© poss√≠vel garantir, por meio de um teste, que um programa est√° completamente correto.  E evidencia que, ap√≥s todos os esfor√ßos empregados, os testes apenas nos proporcionam a confian√ßa de que um programa √© suficientemente correto para atender aos nossos objetivos. E a√≠, voc√™ desenvolvedor que j√° leu esse livro, o que achou? Conte-me a sua experi√™ncia üòÅ!",
        tag: 'Clean Architeture',
        timeToRead: '4 min',
        postImg: cleanImg,
        link: 'https://www.linkedin.com/posts/brunogallotte_dev-cleancode-arquiteturalimpa-activity-7141167703649677312-7EX4?utm_source=share&utm_medium=member_desktop'
    }
]